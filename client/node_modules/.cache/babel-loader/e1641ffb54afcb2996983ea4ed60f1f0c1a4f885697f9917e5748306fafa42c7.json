{"ast":null,"code":"import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';import{fetchSubredditPosts}from'../../utils/api';// use your api.js\nexport const fetchPosts=createAsyncThunk('posts/fetchPosts',async(subreddit,_ref)=>{let{rejectWithValue}=_ref;try{const data=await fetchSubredditPosts(subreddit);return data;}catch(err){return rejectWithValue(err.message);}});const postsSlice=createSlice({name:'posts',initialState:{items:[],status:'idle',error:null},reducers:{},extraReducers:builder=>{builder.addCase(fetchPosts.pending,state=>{state.status='loading';}).addCase(fetchPosts.fulfilled,(state,action)=>{state.status='succeeded';state.items=action.payload;}).addCase(fetchPosts.rejected,(state,action)=>{state.status='failed';state.error=action.payload;});}});export default postsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchSubredditPosts","fetchPosts","subreddit","_ref","rejectWithValue","data","err","message","postsSlice","name","initialState","items","status","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["C:/Users/samue/Documents/Projects/reddit-client/client/src/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { fetchSubredditPosts } from '../../utils/api'; // use your api.js\r\n\r\nexport const fetchPosts = createAsyncThunk(\r\n  'posts/fetchPosts',\r\n  async (subreddit, { rejectWithValue }) => {\r\n    try {\r\n      const data = await fetchSubredditPosts(subreddit);\r\n      return data;\r\n    } catch (err) {\r\n      return rejectWithValue(err.message);\r\n    }\r\n  }\r\n);\r\n\r\nconst postsSlice = createSlice({\r\n  name: 'posts',\r\n  initialState: {\r\n    items: [],\r\n    status: 'idle',\r\n    error: null,\r\n  },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchPosts.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchPosts.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        state.items = action.payload;\r\n      })\r\n      .addCase(fetchPosts.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport default postsSlice.reducer;\r\n"],"mappings":"AAAA,OAASA,WAAW,CAAEC,gBAAgB,KAAQ,kBAAkB,CAChE,OAASC,mBAAmB,KAAQ,iBAAiB,CAAE;AAEvD,MAAO,MAAM,CAAAC,UAAU,CAAGF,gBAAgB,CACxC,kBAAkB,CAClB,MAAOG,SAAS,CAAAC,IAAA,GAA0B,IAAxB,CAAEC,eAAgB,CAAC,CAAAD,IAAA,CACnC,GAAI,CACF,KAAM,CAAAE,IAAI,CAAG,KAAM,CAAAL,mBAAmB,CAACE,SAAS,CAAC,CACjD,MAAO,CAAAG,IAAI,CACb,CAAE,MAAOC,GAAG,CAAE,CACZ,MAAO,CAAAF,eAAe,CAACE,GAAG,CAACC,OAAO,CAAC,CACrC,CACF,CACF,CAAC,CAED,KAAM,CAAAC,UAAU,CAAGV,WAAW,CAAC,CAC7BW,IAAI,CAAE,OAAO,CACbC,YAAY,CAAE,CACZC,KAAK,CAAE,EAAE,CACTC,MAAM,CAAE,MAAM,CACdC,KAAK,CAAE,IACT,CAAC,CACDC,QAAQ,CAAE,CAAC,CAAC,CACZC,aAAa,CAAGC,OAAO,EAAK,CAC1BA,OAAO,CACJC,OAAO,CAAChB,UAAU,CAACiB,OAAO,CAAGC,KAAK,EAAK,CACtCA,KAAK,CAACP,MAAM,CAAG,SAAS,CAC1B,CAAC,CAAC,CACDK,OAAO,CAAChB,UAAU,CAACmB,SAAS,CAAE,CAACD,KAAK,CAAEE,MAAM,GAAK,CAChDF,KAAK,CAACP,MAAM,CAAG,WAAW,CAC1BO,KAAK,CAACR,KAAK,CAAGU,MAAM,CAACC,OAAO,CAC9B,CAAC,CAAC,CACDL,OAAO,CAAChB,UAAU,CAACsB,QAAQ,CAAE,CAACJ,KAAK,CAAEE,MAAM,GAAK,CAC/CF,KAAK,CAACP,MAAM,CAAG,QAAQ,CACvBO,KAAK,CAACN,KAAK,CAAGQ,MAAM,CAACC,OAAO,CAC9B,CAAC,CAAC,CACN,CACF,CAAC,CAAC,CAEF,cAAe,CAAAd,UAAU,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}