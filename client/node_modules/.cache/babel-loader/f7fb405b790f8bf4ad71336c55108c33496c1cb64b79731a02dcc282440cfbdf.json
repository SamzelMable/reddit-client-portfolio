{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { fetchSubredditPosts } from '../../utils/api'; // use your api.js\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async (subreddit, {\n  rejectWithValue\n}) => {\n  try {\n    const data = await fetchSubredditPosts(subreddit);\n    return data;\n  } catch (err) {\n    return rejectWithValue(err.message);\n  }\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState: {\n    items: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchPosts.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.items = action.payload;\n    }).addCase(fetchPosts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    });\n  }\n});\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchSubredditPosts","fetchPosts","subreddit","rejectWithValue","data","err","message","postsSlice","name","initialState","items","status","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["C:/Users/samue/Documents/Projects/reddit-client/client/src/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { fetchSubredditPosts } from '../../utils/api'; // use your api.js\r\n\r\nexport const fetchPosts = createAsyncThunk(\r\n  'posts/fetchPosts',\r\n  async (subreddit, { rejectWithValue }) => {\r\n    try {\r\n      const data = await fetchSubredditPosts(subreddit);\r\n      return data;\r\n    } catch (err) {\r\n      return rejectWithValue(err.message);\r\n    }\r\n  }\r\n);\r\n\r\nconst postsSlice = createSlice({\r\n  name: 'posts',\r\n  initialState: {\r\n    items: [],\r\n    status: 'idle',\r\n    error: null,\r\n  },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchPosts.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchPosts.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        state.items = action.payload;\r\n      })\r\n      .addCase(fetchPosts.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport default postsSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,SAASC,mBAAmB,QAAQ,iBAAiB,CAAC,CAAC;;AAEvD,OAAO,MAAMC,UAAU,GAAGF,gBAAgB,CACxC,kBAAkB,EAClB,OAAOG,SAAS,EAAE;EAAEC;AAAgB,CAAC,KAAK;EACxC,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMJ,mBAAmB,CAACE,SAAS,CAAC;IACjD,OAAOE,IAAI;EACb,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,OAAOF,eAAe,CAACE,GAAG,CAACC,OAAO,CAAC;EACrC;AACF,CACF,CAAC;AAED,MAAMC,UAAU,GAAGT,WAAW,CAAC;EAC7BU,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,MAAM;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACf,UAAU,CAACgB,OAAO,EAAGC,KAAK,IAAK;MACtCA,KAAK,CAACP,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDK,OAAO,CAACf,UAAU,CAACkB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAChDF,KAAK,CAACP,MAAM,GAAG,WAAW;MAC1BO,KAAK,CAACR,KAAK,GAAGU,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDL,OAAO,CAACf,UAAU,CAACqB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAACP,MAAM,GAAG,QAAQ;MACvBO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAed,UAAU,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}